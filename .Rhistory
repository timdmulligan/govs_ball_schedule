install.packages(c('pbdZMQ', 'repr', 'devtools'))  # repr is already on CRAN
# devtools::install_github('IRkernel/repr')        # or get the latest repr from master
devtools::install_github('IRkernel/IRdisplay')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()  # to register the kernel in the current R installation
install.packages("plotly")
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
?plot_ly
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
iris
plot_ly(iris, x = Sepal.Length, y = Sepal.Width, group = Species, mode = 'markers')
plot_ly(iris, x = Sepal.Length, y = Sepal.Width, mode = 'markers')
plot_ly(iris, x = Sepal.Length, y = Sepal.Width, group = Species,
mode = 'markers', size = Petal.Length)
plot_ly(iris, x = Sepal.Length, y = Sepal.Width, group = Species,
mode = 'markers', color = group, size = Petal.Length)
plot_ly(iris, x = Sepal.Length, y = Sepal.Width, group = Species,
mode = 'markers', color = Species, size = Petal.Length)
plot_ly(iris, x = Sepal.Length, y = Sepal.Width,
mode = 'markers', color = Species, size = Petal.Length)
p <- plot_ly(economics, x = date, y = uempmed, type = "scatter",
showlegend = FALSE)
p
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted)
p <- plot_ly(economics, type = 'scatter', x = date, y = uempmed, type = "scatter",
showlegend = FALSE)
p <- plot_ly(economics, mode = 'markers', x = date, y = uempmed, type = "scatter",
showlegend = FALSE)
p
setwd("/Users/timothymulligan/Documents/R/Shiny Practice/bookings")
hist<- read.csv("data/subset.csv", sep = '~')
hist = data.frame(hist)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.class(hist$fiscal_year_nbr)
runApp()
install.packages('reshape')
library(reshape)
runApp()
runApp()
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
setwd("/Users/timothymulligan/Documents/R/Shiny Practice/bookings")
hist<- read.csv("data/subset.csv", sep = '~')
hist = data.frame(hist)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('bookings')
setwd("/Users/timothymulligan/Documents/R/Shiny Practice/bookings")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hist<- read.csv("data/subset.csv", sep = '~')
hist = data.frame(hist)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/Users/timothymulligan/Documents/R/Shiny Practice/")
runApp('partRenew2')
runApp('partRenew2')
runApp('partRenew2')
runApp('partRenew2')
runApp('partRenew2')
runApp('partRenew2')
runApp('partRenew2')
runApp('partRenew2')
runApp('partRenew2')
runApp('partRenew2')
runApp('partRenew2')
runApp('partRenew2')
runApp('partRenew2')
hist <- read.csv("data/subset.csv", sep = '~')
setwd("/Users/timothymulligan/Documents/R/Shiny Practice/partRenew2")
hist <- read.csv("data/subset.csv", sep = '~')
View(hist)
hist <- read.csv("data/subset.csv", sep = '~')
View(hist)
runApp('partRenew2')
runApp()
runApp()
runApp()
View(hist)
View(hist)
runApp()
runApp()
by_fiscal <- group_by(hist, fiscal_qtr_nbr)
View(by_fiscal)
data2 <- summarise(by_fiscal, sum(total_oppty_usd_amt))
View(data2)
aggregate(hist$total_oppty_usd_amt, by=list(hist$fiscal_qtr_nbr), FUN=sum())
aggregate(hist$total_oppty_usd_amt, by=list(hist$fiscal_qtr_nbr), FUN=sum
aggregate(hist$total_oppty_usd_amt, by=list(hist$fiscal_qtr_nbr), FUN=sum)
View(hist)
aggregate(hist$total_oppty_usd_amt, by=list(hist$tb_usd_non_split_amt), FUN=sum)
aggregate(hist$tb_usd_non_split_amt, by=list(hist$fiscal_qtr_nbr), FUN=sum)
aggregate(hist$tb_usd_non_split_amt, by=list(hist$fiscal_year_nbr), FUN=sum)
aggregate(hist$split_adj_tb_usd_amt, by=list(hist$fiscal_year_nbr), FUN=sum)
runApp()
runApp()
runApp()
runApp()
data <- hist
if (input$Geo != "All"){
data <- data[data$geo_cd == input$Geo,]
}
if (input$Country != "All"){
data <- data[data$country_of_order_nm == input$Country,]
}
if (input$Channel != "All"){
data <- data[data$channel_cd == input$Channel,]
}
if (input$Business_Unit != "All"){
data <- data[data$Product.Primary.Business.Unit == input$product_business_unit,]
}
View(hist)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data2 <- aggregate(hist$split_adj_tb_usd_amt, by=list(hist$fiscal_year_nbr), FUN=sum)
names(data2)<-c('Year', 'TB')
View(data2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
aggregate(data$split_adj_tb_usd_amt, by=list(data$fiscal_year_nbr), FUN=sum)
data <- read.csv("data/subset.csv", sep = '~')
aggregate(data$split_adj_tb_usd_amt, by=list(data$fiscal_year_nbr), FUN=sum)
data2 <- data.Frame(aggregate(data$split_adj_tb_usd_amt, by=list(data$fiscal_year_nbr), FUN=sum))
data2 <- data.frame(aggregate(data$split_adj_tb_usd_amt, by=list(data$fiscal_year_nbr), FUN=sum))
data2 <- aggregate(data$split_adj_tb_usd_amt, by=list(data$fiscal_year_nbr), FUN=sum)
runApp()
runApp()
require(devtools)
install_github('ramnathv/rCharts')
runApp()
shiny::runApp('Desktop/custTL')
runApp('Desktop/custTL')
runApp('Desktop/custTL')
runApp('Desktop/custTL')
updateSelectInput()
updateSelectInput
runApp('Desktop/custTL')
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
install.packages('httr')
install.packages('xml2')
install.packages('readr')
library(httr)
library(xml2)
library(readr)
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
username <- "tmulliga@redhat.com"
password <- "RHdatat3amzEVfs6l23PyDIKMsO9bl0LZB"
s <- GET("https://na4.salesforce.com", query = list('un'=username,'pw'=password))
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
username <- "tmulliga@redhat.com"
password <- "RHdatat3am"
s <- GET("https://na4.salesforce.com", query = list('un'=username,'pw'=password))
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
s <- GET("https://na4.salesforce.com", query = list('un'=tmulliga@redhat.com,'pw'=RHdatat3am))
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
s <- GET("https://na4.salesforce.com", query = list('un'='tmulliga@redhat.com','pw'='RHdatat3am'))
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
s <- GET("https://na4.salesforce.com", query = list('un'='tmulliga@redhat.com','pw'='RHdatat3am'))
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
s <- GET("https://na4.salesforce.com", query = list('un'='tmulliga@redhat.com','pw'='RHdatat3amzEVfs6l23PyDIKMsO9bl0LZB'))
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
s <- GET("https://na4.salesforce.com", query = list('un'='tmulliga@redhat.com','pw'='RHdatat3amzEVfs6l23PyDIKMsO9bl0LZB'))
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
s <- GET("https://na4.salesforce.com", query = list('un'='tmulliga@redhat.com','pw'='RHdatat3am'))
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
s <- GET("https://na4.salesforce.com", query = list('un'='tmulliga@redhat.com','pw'='RHdatat3am'))
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
s <- GET("https://na4.salesforce.com", query = list('un'='tmulliga@redhat.com','pw'='RHdatat3am'))
content(s)
s <- GET("https://na4.salesforce.com", query = list('un'='tmulliga@redhat.com','pw'='RHdatat3am'))
content(s)
username <- "tmulliga@redhat.com"
password <- "RHdatat3amzEVfs6l23PyDIKMsO9bl0LZB"
instanceURL <- "https://na4.salesforce.com/"
apiVersion <- "27.0"  ## left this default - did not check
session <- rforcecom.login(username, password, instanceURL, apiVersion)
soqlQuery <- "SELECT SYB_Amount_USD__c FROM Opportunity_Split_Detail__c LIMIT 10"
rforcecom.query(session, soqlQuery)
library(RForcecom)
username <- "tmulliga@redhat.com"
password <- "RHdatat3amzEVfs6l23PyDIKMsO9bl0LZB"
instanceURL <- "https://na4.salesforce.com/"
apiVersion <- "27.0"  ## left this default - did not check
session <- rforcecom.login(username, password, instanceURL, apiVersion)
soqlQuery <- "SELECT SYB_Amount_USD__c FROM Opportunity_Split_Detail__c LIMIT 10"
rforcecom.query(session, soqlQuery)
username <- "tmulliga@redhat.com"
password <- "RHdatat3am"
instanceURL <- "https://na4.salesforce.com/"
apiVersion <- "27.0"  ## left this default - did not check
session <- rforcecom.login(username, password, instanceURL, apiVersion)
soqlQuery <- "SELECT SYB_Amount_USD__c FROM Opportunity_Split_Detail__c LIMIT 10"
rforcecom.query(session, soqlQuery)
s <- GET("https://na4.salesforce.com", query = list('un'='tmulliga@redhat.com','pw'='RHdatat3am'))
content(s)
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
d <- GET(paste("https://na4.salesforce.com/00O600000046Zt7o&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
d <- GET(paste("https://na4.salesforce.com/00O600000046Zt7&export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
d
username <- "tmulliga@redhat.com"
password <- "RHdatat3amzEVfs6l23PyDIKMsO9bl0LZB"
instanceURL <- "https://na4.salesforce.com/"
apiVersion <- "27.0"  ## left this default - did not check
session <- rforcecom.login(username, password, instanceURL, apiVersion)
soqlQuery <- "SELECT SYB_Amount_USD__c FROM Opportunity_Split_Detail__c LIMIT 10"
rforcecom.query(session, soqlQuery)
d <- GET(paste("https://na4.salesforce.com/00O600000046Zt7?export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
d <- GET(paste("https://na4.salesforce.com/00O60000004kZjo?export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
d <- GET(paste("https://na4.salesforce.com/00O600000046Zt7?export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
s <- GET("https://na4.salesforce.com", query = list('un'='tmulliga@redhat.com','pw'='RHdatat3am'))
content(s)
d <- GET(paste("https://na4.salesforce.com/00O600000046aFI?export=1&enc=UTF-8&xf=csv",sep=''))
df <- suppressWarnings(content(d))
df
df <- unique(df)
df
emea_sf <- GET(paste("https://na4.salesforce.com/00O600000046aKh?export=1&enc=UTF-8&xf=csv",sep=''))
emea <- suppressWarnings(content(emea_sf))
emea <- unique(emea)
apac_sf <- GET(paste("https://na4.salesforce.com/00O600000046aFI?export=1&enc=UTF-8&xf=csv",sep=''))
apac <- suppressWarnings(content(apac_sf))
apac <- unique(apac)
addresses <- c("00O600000046aFI",
"00O600000046aKh",
"00O600000046aLf",
"00O600000046acR",
"00O60000004kdch",
"00O600000046cAF"
)
for (i in addresses){
GET(paste("https://na4.salesforce.com/", i, "?export=1&enc=UTF-8&xf=csv"))
}
library(httr)
library(xml2)
library(readr)
for (i in addresses){
GET(paste("https://na4.salesforce.com/", i, "?export=1&enc=UTF-8&xf=csv"))
}
for (i in addresses){
i <- GET(paste("https://na4.salesforce.com/", i, "?export=1&enc=UTF-8&xf=csv"))
}
for (i in addresses){
x <-paste("https://na4.salesforce.com/", i, "?export=1&enc=UTF-8&xf=csv")
}
for (i in addresses){
x <-paste("https://na4.salesforce.com/", i, "?export=1&enc=UTF-8&xf=csv", sep = '')
}
x
for (i in addresses){
i <-paste("https://na4.salesforce.com/", i, "?export=1&enc=UTF-8&xf=csv", sep = '')
h <- append(h,i)
}
h <- c()
for (i in addresses){
i <-paste("https://na4.salesforce.com/", i, "?export=1&enc=UTF-8&xf=csv", sep = '')
h <- append(h,i)
}
h
h <- c()
for (i in addresses){
i <-paste("https://na4.salesforce.com/", i, "?export=1&enc=UTF-8&xf=csv", sep = '')
[i] <- append(h,i)
}
i
h <- c()
for (i in addresses){
i <-paste("https://na4.salesforce.com/", i, "?export=1&enc=UTF-8&xf=csv", sep = '')
id[i] <- append(h,i)
}
id <- c()
for (i in addresses){
i <-paste("https://na4.salesforce.com/", i, "?export=1&enc=UTF-8&xf=csv", sep = '')
id[i] <- append(h,i)
}
id <- c()
for (i in addresses){
i <-paste("https://na4.salesforce.com/", i, "?export=1&enc=UTF-8&xf=csv", sep = '')
id[i] <- i
}
id
getSFDC <- function(adds){
listofdfs <- list()
for (i in 1:length(adds)){
url <-GET(paste("https://na4.salesforce.com/", adds[i], "?export=1&enc=UTF-8&xf=csv", sep = ''))
df <- head(unique(suppressWarnings(content(na_sf))[,3]),-5)
#df<- data.frame(json_data$resultSets[1, "rowSet"])
#names(df)<-unlist(json_data$resultSets[1,"headers"])
listofdfs[[i]] <- df
}
return(listofdfs)
}
getstats(adds = addresses)
getSFDC <- function(adds){
listofdfs <- list()
for (i in 1:length(adds)){
url <-GET(paste("https://na4.salesforce.com/", adds[i], "?export=1&enc=UTF-8&xf=csv", sep = ''))
df <- head(unique(suppressWarnings(content(na_sf))[,3]),-5)
#df<- data.frame(json_data$resultSets[1, "rowSet"])
#names(df)<-unlist(json_data$resultSets[1,"headers"])
listofdfs[[i]] <- df
}
return(listofdfs)
}
getSFDC(adds = addresses)
getSFDC <- function(adds){
listofdfs <- list()
for (i in 1:length(adds)){
url <-GET(paste("https://na4.salesforce.com/", adds[i], "?export=1&enc=UTF-8&xf=csv", sep = ''))
df <- head(unique(suppressWarnings(content(url))),-5)
#df<- data.frame(json_data$resultSets[1, "rowSet"])
#names(df)<-unlist(json_data$resultSets[1,"headers"])
listofdfs[[i]] <- df
}
return(listofdfs)
}
getSFDC(adds = addresses)
url <-GET(paste("https://na4.salesforce.com/", adds[i], "?export=1&enc=UTF-8&xf=csv", sep = ''))
df <- head(unique(suppressWarnings(content(url))),-5)
url <-GET(paste("https://na4.salesforce.com/", "00O600000046aFI", "?export=1&enc=UTF-8&xf=csv", sep = ''))
df <- head(unique(suppressWarnings(content(url))),-5)
url
top_28_sf <- GET(paste("https://na4.salesforce.com/00O600000046cAF?export=1&enc=UTF-8&xf=csv",sep=''))
top_28 <- head(unique(suppressWarnings(content(top_28_sf)[,3])),-5)
global_sf <- GET(paste("https://na4.salesforce.com/00O60000004kdch?export=1&enc=UTF-8&xf=csv",sep=''))
global <- head(unique(suppressWarnings(content(global_sf)[,4])),-5)
top_28_sf <- GET(paste("https://na4.salesforce.com/00O600000046cAF?export=1&enc=UTF-8&xf=csv",sep=''))
top_28 <- head(unique(suppressWarnings(content(top_28_sf))),-5)
getSFDC <- function(adds){
listofdfs <- list()
s <- GET("https://na4.salesforce.com", query = list('un'='tmulliga@redhat.com','pw'='RHdatat3am'))
for (i in 1:length(adds)){
url <-GET(paste("https://na4.salesforce.com/", adds[i], "?export=1&enc=UTF-8&xf=csv", sep = ''))
df <- head(unique(suppressWarnings(content(url))),-5)
#df<- data.frame(json_data$resultSets[1, "rowSet"])
#names(df)<-unlist(json_data$resultSets[1,"headers"])
listofdfs[[i]] <- df
}
return(listofdfs)
}
getSFDC(adds = addresses)
sfdc_tables <- getSFDC(adds = addresses)
unlist(sfdc_tables)
sfdc_tables[1]
sfdc_tables[1][,1]
sfdc_tables[1][,'Account ID']
type(sfdc_tables[1])
dtype(sfdc_tables[1])
types(sfdc_tables[1])
??type
dtypes(sfdc_tables[1])
typeof(sfdc_tables[1])
typeof(data.frame(sfdc_tables[1])
typeof(data.frame(sfdc_tables[1]))
df <-sfdc_tables[1]
df <-sfdc_tables[[1]]
df <-sfdc_tables[[1]][,3]
library(rsconnect)
deployapp()
deployApp()
deployApp("govs_ball_schedule/govs_ball/")
shiny::runApp('govs_ball_schedule/govs_ball')
con = dbConnect(SQLite(), dbname="../pitchfork-data-shiny.db")
runApp('govs_ball_schedule/govs_ball')
deployApp("govs_ball_schedule/govs_ball/", appName = "govs_ball")
runApp('govs_ball_schedule/govs_ball')
runApp('govs_ball_schedule/govs_ball')
runApp()
runApp('govs_ball_schedule/govs_ball')
deployApp("govs_ball_schedule/govs_ball/", appName = "govs_ball")
runApp('govs_ball_schedule/govs_ball')
runApp('govs_ball_schedule/govs_ball')
deployApp("govs_ball_schedule/govs_ball/", appName = "govs_ball")
shiny::runApp('govs_ball_schedule/govs_ball')
deployApp("govs_ball_schedule/govs_ball/", appName = "govs_ball")
getwd()
library(rsconnect)
deployApp("govs_ball_schedule/govs_ball/", appName = "govs_ball")
source('~/govs_ball_schedule/pitchfork_correlation.R')
